{"name":"Hexpress","tagline":"Human Expressions, a human way to define regular expressions","body":"  - [![Gem Version](https://badge.fury.io/rb/hexpress.png)](https://rubygems.org/gems/hexpress)\r\n  - [![Code Climate](https://codeclimate.com/github/krainboltgreene/hexpress.png)](https://codeclimate.com/github/krainboltgreene/hexpress)\r\n  - [![Build Status](https://travis-ci.org/krainboltgreene/hexpress.png?branch=master)](https://travis-ci.org/krainboltgreene/hexpress)\r\n  - [![Dependency Status](https://gemnasium.com/krainboltgreene/hexpress.png)](https://gemnasium.com/krainboltgreene/hexpress)\r\n  - [![Coverage Status](https://coveralls.io/repos/krainboltgreene/hexpress/badge.png?branch=master)](https://coveralls.io/r/krainboltgreene/hexpress)\r\n\r\n\r\n**NOTE**: This is not the [bvision/hexpress](https://github.com/bvision/hexpress) for slim rails packages!\r\n\r\nThe hexpress gem is another take at the concept of [\"Verbal Hexpressions\"]() in Ruby.\r\n\r\n\r\nUsing\r\n=====\r\n\r\n``` ruby\r\nrequire \"hexpress\"\r\n\r\npattern = Hexpress.new\r\n\r\npattern = Hexpress.new.\r\n  start(\"http\").\r\n  maybe(\"s\").\r\n  with(\"://\").\r\n  maybe { words.with(\".\") }.\r\n  find { matching { [word, \"-\"] }.multiple }.\r\n  has(\".\").\r\n  either(\"com\", \"org\").\r\n  maybe(\"/\").\r\n  ending\r\n```\r\n\r\nAfter requiring hexpress you'll have access to the Hexpress class, which allows you to chain methods to build up a regex pattern.\r\n\r\nYou can see this pattern by calling either `Hexpress#to_s` or `Hexpress#to_r`:\r\n\r\n``` ruby\r\npattern.to_s #=> \"^http(?:s)?://(?:(?:\\\\w)+\\\\.)?([\\\\w\\\\-]+)\\\\.(?:com|org)(?:/)?$\"\r\npattern.to_r #=> /^http(?:s)?:\\/\\/(?:(?:\\w)+\\.)?([\\w\\-]+)\\.(?:com|org)(?:\\/)?$/\r\n```\r\n\r\nYou can also get access to a global method by doing the following (automatically done in any rails application):\r\n\r\n``` ruby\r\nrequire_relative \"hexpress/main\"\r\n\r\nhexp.start(\"http\").maybe(\"s\")\r\n\r\nhexp do\r\n  start(\"http\")\r\n  maybe(\"s\")\r\nend\r\n```\r\n\r\nIn addition we've bundled an extra set of helpers for specific use cases like the web:\r\n\r\n``` ruby\r\nrequire \"hexpress\"\r\nrequire \"hexpress/web\"\r\n\r\npattern = hexp.http.domain(\"amazon\").tld(\"com\")\r\npattern = hexp.ftp # ...\r\n```\r\n\r\nInstalling\r\n==========\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem \"hexpress\", \"~> 1.0\"\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install hexpress\r\n\r\n\r\nContributing\r\n============\r\n\r\n  1. Fork it\r\n  2. Create your feature branch (`git checkout -b my-new-feature`)\r\n  3. Commit your changes (`git commit -am 'Add some feature'`)\r\n  4. Push to the branch (`git push origin my-new-feature`)\r\n  5. Create new Pull Request\r\n\r\n\r\nLicensing\r\n=========\r\n\r\nCopyright (c) 2013 Kurtis Rainbolt-Greene\r\n\r\nMIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}